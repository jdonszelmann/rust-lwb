
#![allow(unused)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(clippy::all)]
// |==========================================================|
// | WARNING: THIS FILE IS AUTOMATICALLY GENERATED.           |
// | CHANGES TO IT WILL BE DELETED WHEN REGENERATED.          |
// | IN GENERAL, THIS FILE SHOULD NOT BE MODIFIED IN ANY WAY. |
// |==========================================================|


use crate::codegen_prelude::*;

#[derive(Serialize, Deserialize, Debug)]
pub enum Identifier<M : AstInfo> {
    Identifier(M, String),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum EscapeClosingBracket<M : AstInfo> {
    Escaped(M, String),
    Unescaped(M, String),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum CharacterClassItem<M : AstInfo> {
    Range(M, Box<EscapeClosingBracket<M>>,Box<EscapeClosingBracket<M>>),
    SingleChar(M, Box<EscapeClosingBracket<M>>),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum StringChar<M : AstInfo> {
    Escaped(M, String),
    Normal(M, String),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Number<M : AstInfo> {
    Number(M, String),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum CharacterClass<M : AstInfo> {
    Class(M, bool,Vec<Box<CharacterClassItem<M>>>),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Expression<M : AstInfo> {
    Star(M, Box<Expression<M>>),
    Plus(M, Box<Expression<M>>),
    Maybe(M, Box<Expression<M>>),
    RepeatExact(M, Box<Expression<M>>,Box<Number<M>>,Option<Box<Number<M>>>),
    Literal(M, Vec<Box<StringChar<M>>>),
    SingleQuoteLiteral(M, Vec<Box<StringChar<M>>>),
    Sort(M, Box<Identifier<M>>),
    Class(M, Box<CharacterClass<M>>),
    Paren(M, Vec<Box<Expression<M>>>),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Annotation<M : AstInfo> {
    Annotation(M, Option<Box<Identifier<M>>>,Vec<Box<Identifier<M>>>,bool),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Constructor<M : AstInfo> {
    Constructor(M, Box<Identifier<M>>,Vec<Box<Expression<M>>>,Option<Box<Annotation<M>>>),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Newline<M : AstInfo> {
    Unix(M, ),
    Windows(M, ),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Sort<M : AstInfo> {
    Sort(M, Box<Identifier<M>>,Vec<Box<Constructor<M>>>),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Meta<M : AstInfo> {
    Layout(M, Box<CharacterClass<M>>),
    Start(M, Box<Identifier<M>>),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum SortOrMeta<M : AstInfo> {
    Meta(M, Box<Meta<M>>),
    Sort(M, Box<Sort<M>>),
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Program<M : AstInfo> {
    Program(M, Vec<Box<SortOrMeta<M>>>),
}

pub type AST_ROOT<M> = Program<M>;

impl<M: AstInfo> FromPairs<M> for Identifier<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "identifier");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "identifier" => {
        Self::Identifier(info, pair.constructor_value.span().as_str().to_string())
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for EscapeClosingBracket<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "escape-closing-bracket");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "escaped" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Escaped(info, if let ParsePairExpression::Empty(ref span) = p[1] {
            span.as_str().to_string()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of escape-closing-bracket")
        })
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of escape-closing-bracket")
                        }
        }
        "unescaped" => {
        Self::Unescaped(info, if let ParsePairExpression::Empty(ref span) = pair.constructor_value {
            span.as_str().to_string()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of escape-closing-bracket")
        })
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for CharacterClassItem<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "character-class-item");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "range" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Range(info, if let ParsePairExpression::Sort(_, ref s) = p[0] {
                    Box::new(EscapeClosingBracket::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of character-class-item")
                },if let ParsePairExpression::Sort(_, ref s) = p[2] {
                    Box::new(EscapeClosingBracket::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of character-class-item")
                })
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of character-class-item")
                        }
        }
        "single-char" => {
        Self::SingleChar(info, if let ParsePairExpression::Sort(_, ref s) = pair.constructor_value {
                    Box::new(EscapeClosingBracket::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of character-class-item")
                })
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for StringChar<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "string-char");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "escaped" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Escaped(info, if let ParsePairExpression::Empty(ref span) = p[1] {
            span.as_str().to_string()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of string-char")
        })
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of string-char")
                        }
        }
        "normal" => {
        Self::Normal(info, if let ParsePairExpression::Empty(ref span) = pair.constructor_value {
            span.as_str().to_string()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of string-char")
        })
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for Number<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "number");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "number" => {
        Self::Number(info, pair.constructor_value.span().as_str().to_string())
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for CharacterClass<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "character-class");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "class" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Class(info, if let ParsePairExpression::List(_, ref l) = p[1] {
            l.first().is_some()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of character-class")
        }
                            ,if let ParsePairExpression::List(_, ref l) = p[2] {
            l.iter().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(CharacterClassItem::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of character-class")
                } }).collect()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of character-class")
        }
                            )
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of character-class")
                        }
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for Expression<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "expression");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "star" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Star(info, if let ParsePairExpression::Sort(_, ref s) = p[0] {
                    Box::new(Expression::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                })
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of expression")
                        }
        }
        "plus" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Plus(info, if let ParsePairExpression::Sort(_, ref s) = p[0] {
                    Box::new(Expression::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                })
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of expression")
                        }
        }
        "maybe" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Maybe(info, if let ParsePairExpression::Sort(_, ref s) = p[0] {
                    Box::new(Expression::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                })
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of expression")
                        }
        }
        "repeat-exact" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::RepeatExact(info, if let ParsePairExpression::Sort(_, ref s) = p[0] {
                    Box::new(Expression::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                },if let ParsePairExpression::Sort(_, ref s) = p[2] {
                    Box::new(Number::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                },if let ParsePairExpression::List(_, ref l) = p[4] {
            l.first().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(Number::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                } })
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of expression")
        }
                            )
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of expression")
                        }
        }
        "literal" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Literal(info, if let ParsePairExpression::List(_, ref l) = p[1] {
            l.iter().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(StringChar::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                } }).collect()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of expression")
        }
                            )
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of expression")
                        }
        }
        "single-quote-literal" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::SingleQuoteLiteral(info, if let ParsePairExpression::List(_, ref l) = p[1] {
            l.iter().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(StringChar::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                } }).collect()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of expression")
        }
                            )
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of expression")
                        }
        }
        "sort" => {
        Self::Sort(info, if let ParsePairExpression::Sort(_, ref s) = pair.constructor_value {
                    Box::new(Identifier::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                })
        }
        "class" => {
        Self::Class(info, if let ParsePairExpression::Sort(_, ref s) = pair.constructor_value {
                    Box::new(CharacterClass::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                })
        }
        "paren" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Paren(info, if let ParsePairExpression::List(_, ref l) = p[1] {
            l.iter().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(Expression::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of expression")
                } }).collect()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of expression")
        }
                            )
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of expression")
                        }
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for Annotation<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "annotation");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "annotation" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Annotation(info, if let ParsePairExpression::List(_, ref l) = p[1] {
            l.first().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(Identifier::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of annotation")
                } })
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of annotation")
        }
                            ,if let ParsePairExpression::List(_, ref l) = p[2] {
            l.iter().map(|x| { if let ParsePairExpression::List(_, ref p) = x {
            if let ParsePairExpression::Sort(_, ref s) = p[1] {
                    Box::new(Identifier::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of annotation")
                }
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of annotation")
        } }).collect()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of annotation")
        }
                            ,if let ParsePairExpression::List(_, ref l) = p[3] {
            l.first().is_some()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of annotation")
        }
                            )
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of annotation")
                        }
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for Constructor<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "constructor");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "constructor" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Constructor(info, if let ParsePairExpression::Sort(_, ref s) = p[1] {
                    Box::new(Identifier::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of constructor")
                },if let ParsePairExpression::List(_, ref l) = p[3] {
            l.iter().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(Expression::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of constructor")
                } }).collect()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of constructor")
        }
                            ,if let ParsePairExpression::List(_, ref l) = p[5] {
            l.first().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(Annotation::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of constructor")
                } })
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of constructor")
        }
                            )
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of constructor")
                        }
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for Newline<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "newline");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "unix" => {
        Self::Unix(info)
        }
        "windows" => {
        Self::Windows(info)
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for Sort<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "sort");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "sort" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Sort(info, if let ParsePairExpression::Sort(_, ref s) = p[0] {
                    Box::new(Identifier::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of sort")
                },if let ParsePairExpression::List(_, ref l) = p[2] {
            l.iter().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(Constructor::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of sort")
                } }).collect()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of sort")
        }
                            )
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of sort")
                        }
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for Meta<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "meta");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "layout" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Layout(info, if let ParsePairExpression::Sort(_, ref s) = p[2] {
                    Box::new(CharacterClass::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of meta")
                })
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of meta")
                        }
        }
        "start" => {
        if let ParsePairExpression::List(_, ref p) = pair.constructor_value {
                            Self::Start(info, if let ParsePairExpression::Sort(_, ref s) = p[2] {
                    Box::new(Identifier::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of meta")
                })
                        } else {
                            panic!("expected empty parse pair expression in pair to ast conversion of meta")
                        }
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for SortOrMeta<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "sort-or-meta");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "meta" => {
        Self::Meta(info, if let ParsePairExpression::Sort(_, ref s) = pair.constructor_value {
                    Box::new(Meta::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of sort-or-meta")
                })
        }
        "sort" => {
        Self::Sort(info, if let ParsePairExpression::Sort(_, ref s) = pair.constructor_value {
                    Box::new(Sort::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of sort-or-meta")
                })
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> FromPairs<M> for Program<M> {
    fn from_pairs<G: GenerateAstInfo<Result = M>>(pair: &ParsePairSort, generator: &mut G) -> Self {
        assert_eq!(pair.sort, "program");
        let info = generator.generate(&pair);
        match pair.constructor_name {
        "program" => {
        Self::Program(info, if let ParsePairExpression::List(_, ref l) = pair.constructor_value {
            l.iter().map(|x| { if let ParsePairExpression::Sort(_, ref s) = x {
                    Box::new(SortOrMeta::from_pairs(s, generator))
                } else {
                    panic!("expected empty parse pair expression in pair to ast conversion of program")
                } }).collect()
        } else {
            panic!("expected empty parse pair expression in pair to ast conversion of program")
        }
                            )
        }
        a => unreachable!("{}", a)
        }
    }
}

impl<M: AstInfo> AstNode<M> for Identifier<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Identifier(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "identifier"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Identifier(info, ..) => { "identifier" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for EscapeClosingBracket<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Escaped(info, ..) => { info }
            Self::Unescaped(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "escape-closing-bracket"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Escaped(info, ..) => { "escaped" }
            Self::Unescaped(info, ..) => { "unescaped" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for CharacterClassItem<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Range(info, ..) => { info }
            Self::SingleChar(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "character-class-item"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Range(info, ..) => { "range" }
            Self::SingleChar(info, ..) => { "single-char" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for StringChar<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Escaped(info, ..) => { info }
            Self::Normal(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "string-char"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Escaped(info, ..) => { "escaped" }
            Self::Normal(info, ..) => { "normal" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for Number<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Number(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "number"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Number(info, ..) => { "number" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for CharacterClass<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Class(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "character-class"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Class(info, ..) => { "class" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for Expression<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Star(info, ..) => { info }
            Self::Plus(info, ..) => { info }
            Self::Maybe(info, ..) => { info }
            Self::RepeatExact(info, ..) => { info }
            Self::Literal(info, ..) => { info }
            Self::SingleQuoteLiteral(info, ..) => { info }
            Self::Sort(info, ..) => { info }
            Self::Class(info, ..) => { info }
            Self::Paren(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "expression"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Star(info, ..) => { "star" }
            Self::Plus(info, ..) => { "plus" }
            Self::Maybe(info, ..) => { "maybe" }
            Self::RepeatExact(info, ..) => { "repeat-exact" }
            Self::Literal(info, ..) => { "literal" }
            Self::SingleQuoteLiteral(info, ..) => { "single-quote-literal" }
            Self::Sort(info, ..) => { "sort" }
            Self::Class(info, ..) => { "class" }
            Self::Paren(info, ..) => { "paren" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for Annotation<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Annotation(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "annotation"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Annotation(info, ..) => { "annotation" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for Constructor<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Constructor(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "constructor"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Constructor(info, ..) => { "constructor" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for Newline<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Unix(info, ..) => { info }
            Self::Windows(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "newline"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Unix(info, ..) => { "unix" }
            Self::Windows(info, ..) => { "windows" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for Sort<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Sort(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "sort"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Sort(info, ..) => { "sort" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for Meta<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Layout(info, ..) => { info }
            Self::Start(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "meta"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Layout(info, ..) => { "layout" }
            Self::Start(info, ..) => { "start" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for SortOrMeta<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Meta(info, ..) => { info }
            Self::Sort(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "sort-or-meta"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Meta(info, ..) => { "meta" }
            Self::Sort(info, ..) => { "sort" }
            }
        }
    }
}

impl<M: AstInfo> AstNode<M> for Program<M> {
    fn ast_info(&self) -> &M {
        {
            match self {
            Self::Program(info, ..) => { info }
            }
        }
    }

    fn node_sort(&self) -> &'static str {
        {
            "program"
        }
    }

    fn constructor(&self) -> &'static str {
        {
            match self {
            Self::Program(info, ..) => { "program" }
            }
        }
    }
}pub const PARSER: &[u8] = &[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 49, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 2, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 65, 1, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 97, 1, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 122, 1, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 65, 1, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 97, 1, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 1, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 57, 1, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 45, 1, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 110, 111, 45, 108, 97, 121, 111, 117, 116, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 115, 105, 110, 103, 108, 101, 45, 115, 116, 114, 105, 110, 103, 0, 1, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 101, 115, 99, 97, 112, 101, 45, 99, 108, 111, 115, 105, 110, 103, 45, 98, 114, 97, 99, 107, 101, 116, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 101, 115, 99, 97, 112, 101, 100, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 92, 7, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 93, 1, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 110, 1, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 1, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 116, 1, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 117, 110, 101, 115, 99, 97, 112, 101, 100, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 93, 0, 1, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 45, 99, 108, 97, 115, 115, 45, 105, 116, 101, 109, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 114, 97, 110, 103, 101, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 195, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 101, 115, 99, 97, 112, 101, 45, 99, 108, 111, 115, 105, 110, 103, 45, 98, 114, 97, 99, 107, 101, 116, 4, 0, 0, 0, 219, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 45, 6, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 101, 115, 99, 97, 112, 101, 45, 99, 108, 111, 115, 105, 110, 103, 45, 98, 114, 97, 99, 107, 101, 116, 0, 0, 0, 0, 0, 247, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 115, 105, 110, 103, 108, 101, 45, 99, 104, 97, 114, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 1, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 101, 115, 99, 97, 112, 101, 45, 99, 108, 111, 115, 105, 110, 103, 45, 98, 114, 97, 99, 107, 101, 116, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 34, 1, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 105, 110, 106, 101, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 47, 1, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 115, 116, 114, 105, 110, 103, 45, 99, 104, 97, 114, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 1, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 101, 115, 99, 97, 112, 101, 100, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 74, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 92, 7, 0, 0, 0, 79, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 80, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 80, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 110, 1, 0, 0, 0, 81, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 81, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 1, 0, 0, 0, 82, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 82, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 116, 1, 0, 0, 0, 83, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 92, 1, 0, 0, 0, 85, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 85, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 110, 111, 114, 109, 97, 108, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 102, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 104, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 104, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 34, 1, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 92, 0, 1, 0, 0, 0, 111, 1, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 110, 117, 109, 98, 101, 114, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 110, 117, 109, 98, 101, 114, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 132, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 132, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 133, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 48, 1, 0, 0, 0, 135, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 140, 1, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 141, 1, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 115, 105, 110, 103, 108, 101, 45, 115, 116, 114, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 157, 1, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 45, 99, 108, 97, 115, 115, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 1, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 99, 108, 97, 115, 115, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 187, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 188, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 91, 2, 0, 0, 0, 191, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 191, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 196, 1, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 196, 1, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 1, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 45, 99, 108, 97, 115, 115, 45, 105, 116, 101, 109, 4, 0, 0, 0, 218, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 219, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 223, 1, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 224, 1, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 110, 111, 45, 108, 97, 121, 111, 117, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 236, 1, 0, 0, 0, 0, 0, 0, 106, 1, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 1, 0, 0, 0, 0, 0, 0, 106, 1, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 1, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 1, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 115, 116, 97, 114, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 4, 0, 0, 0, 14, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 141, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 15, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 19, 2, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 112, 108, 117, 115, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 30, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 4, 0, 0, 0, 41, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 42, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 46, 2, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 109, 97, 121, 98, 101, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 58, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 4, 0, 0, 0, 69, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 70, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 74, 2, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 2, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 114, 101, 112, 101, 97, 116, 45, 101, 120, 97, 99, 116, 6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 93, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 4, 0, 0, 0, 104, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 105, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 123, 6, 0, 0, 0, 108, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 110, 117, 109, 98, 101, 114, 4, 0, 0, 0, 115, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 116, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 44, 2, 0, 0, 0, 119, 2, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 119, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 167, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 110, 117, 109, 98, 101, 114, 4, 0, 0, 0, 127, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 128, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 133, 2, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 2, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 108, 105, 116, 101, 114, 97, 108, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 147, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 152, 2, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 152, 2, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 2, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 115, 116, 114, 105, 110, 103, 45, 99, 104, 97, 114, 4, 0, 0, 0, 165, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 34, 1, 0, 0, 0, 0, 171, 2, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 172, 2, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 110, 111, 45, 108, 97, 121, 111, 117, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187, 2, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 115, 105, 110, 103, 108, 101, 45, 113, 117, 111, 116, 101, 45, 108, 105, 116, 101, 114, 97, 108, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 210, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 211, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 214, 2, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 185, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 214, 2, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 2, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 115, 116, 114, 105, 110, 103, 45, 99, 104, 97, 114, 4, 0, 0, 0, 227, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 228, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 232, 2, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 233, 2, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 191, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 110, 111, 45, 108, 97, 121, 111, 117, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245, 2, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 193, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 115, 111, 114, 116, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 195, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 0, 0, 0, 0, 0, 12, 3, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 99, 108, 97, 115, 115, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 24, 3, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 199, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 45, 99, 108, 97, 115, 115, 0, 0, 0, 0, 0, 42, 3, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 112, 97, 114, 101, 110, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 54, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 202, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 55, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0, 0, 58, 3, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 58, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 206, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 4, 0, 0, 0, 70, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 71, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 75, 3, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 76, 3, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 105, 110, 106, 101, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 88, 3, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 3, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 97, 110, 110, 111, 116, 97, 116, 105, 111, 110, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 97, 110, 110, 111, 116, 97, 116, 105, 111, 110, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 117, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 118, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 123, 2, 0, 0, 0, 121, 3, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 121, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 0, 0, 0, 0, 133, 3, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 221, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 133, 3, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 134, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 135, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 44, 6, 0, 0, 0, 138, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 226, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 2, 0, 0, 0, 151, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 151, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 152, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 229, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 44, 4, 0, 0, 0, 156, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 157, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 125, 0, 1, 0, 0, 0, 162, 3, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 3, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 3, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175, 3, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 3, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 193, 3, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 237, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 194, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 195, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 196, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 197, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 6, 0, 0, 0, 200, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 4, 0, 0, 0, 211, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 244, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 212, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 245, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 61, 1, 0, 0, 0, 215, 3, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 215, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 4, 0, 0, 0, 227, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 228, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 59, 2, 0, 0, 0, 231, 3, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 251, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 231, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 97, 110, 110, 111, 116, 97, 116, 105, 111, 110, 0, 1, 0, 0, 0, 245, 3, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245, 3, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245, 3, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 110, 101, 119, 108, 105, 110, 101, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 3, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 117, 110, 105, 120, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 9, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 15, 4, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 119, 105, 110, 100, 111, 119, 115, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 29, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 110, 0, 1, 0, 0, 0, 38, 4, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 4, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 12, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 115, 111, 114, 116, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 4, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 14, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 115, 111, 114, 116, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 55, 4, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 4, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 4, 0, 0, 0, 66, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 67, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 18, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 70, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 70, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 20, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 0, 1, 0, 0, 0, 85, 4, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 4, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 109, 101, 116, 97, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 4, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 26, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 108, 97, 121, 111, 117, 116, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 104, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 105, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 28, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 108, 1, 0, 0, 0, 106, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 97, 1, 0, 0, 0, 107, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 30, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 121, 1, 0, 0, 0, 108, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 111, 1, 0, 0, 0, 109, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 117, 1, 0, 0, 0, 110, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 116, 4, 0, 0, 0, 113, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 34, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 114, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 61, 6, 0, 0, 0, 117, 4, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 4, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 99, 104, 97, 114, 97, 99, 116, 101, 114, 45, 99, 108, 97, 115, 115, 4, 0, 0, 0, 133, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 38, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 134, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 138, 4, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 142, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 115, 116, 97, 114, 116, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 150, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 42, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 151, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 115, 1, 0, 0, 0, 152, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 116, 1, 0, 0, 0, 153, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 97, 1, 0, 0, 0, 154, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 46, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 1, 0, 0, 0, 155, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 116, 4, 0, 0, 0, 158, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 48, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 159, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 97, 1, 0, 0, 0, 160, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 50, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 116, 6, 0, 0, 0, 163, 4, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 4, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 52, 1, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 4, 0, 0, 0, 174, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 175, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 59, 0, 1, 0, 0, 0, 180, 4, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 4, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 115, 111, 114, 116, 45, 111, 114, 45, 109, 101, 116, 97, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 4, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 58, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 109, 101, 116, 97, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 205, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 60, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 109, 101, 116, 97, 0, 0, 0, 0, 0, 211, 4, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 62, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 115, 111, 114, 116, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 222, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 115, 111, 114, 116, 0, 1, 0, 0, 0, 229, 4, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 66, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 4, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 68, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 112, 114, 111, 103, 114, 97, 109, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 4, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 4, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 70, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 112, 114, 111, 103, 114, 97, 109, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 4, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 252, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 72, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 115, 111, 114, 116, 45, 111, 114, 45, 109, 101, 116, 97, 0, 0, 0, 0, 0, 12, 5, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 74, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 5, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 76, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 22, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 78, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 110, 1, 0, 0, 0, 24, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 80, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 1, 0, 0, 0, 26, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 82, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 116, 1, 0, 0, 0, 28, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 28, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 33, 5, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 33, 5, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 86, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 5, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 112, 114, 111, 103, 114, 97, 109];