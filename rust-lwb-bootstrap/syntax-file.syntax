
identifier = [A-Za-z_][A-Za-z0-9-_]*; {no-layout, single-string}

escape-closing-bracket:
    escaped = "\\" [\]nrt\\];
    unescaped = [^\]];

character-class-item:
    range = escape-closing-bracket  "-" escape-closing-bracket;
    single-char = escape-closing-bracket; {injection}


string-char:
    escaped = "\\" [nrt\\"];
    normal = [^"\\];

number = [0-9]+; {single-string}

character-class:
    class =  "[" "^"? character-class-item* "]"; {no-layout}

expression:
    star = expression "*";
    plus = expression "+";
    maybe = expression "?";
    repeat-exact = expression "{" number "," number? "}";

    literal = "\"" string-char* "\""; {no-layout}
    single-quote-literal = "'" string-char* "'"; {no-layout}

    delimited = "delimited" "(" expression "," expression "," delimited-bound ("," "trailing")? ")";

    sort = identifier;
    class = character-class;

    paren = "(" expression+ ")"; {injection}

delimited-bound:
    num-num = number "," number;
    num-inf = number "," "inf";
    num = number;
    star = "*";
    plus = "+";

annotation = "{" identifier? ("," identifier)* ","? "}";

constructor = "    " identifier "=" expression+ ";" annotation?;

newline:
    unix = "\n";
    windows = "\r\n";

sort:
    sort = identifier ":" constructor*;
    sort-single = identifier "=" expression+ ";" annotation?;

meta:
    start = "start" "at" identifier ";";

sort-or-meta:
    meta = meta;
    sort = sort;

program = sort-or-meta*;

layout = [\n\r\t ];

start at program;