
/// An identifier is any name of a constructor or sort, and is used in various places.
/// Identifiers always start with a letter (capital or not) or an underscore, and can be
/// followed by letters or numbers. This is very similar to how variables in most major
/// programming languages work.
identifier = [A-Za-z_][A-Za-z0-9-_]*; {no-layout, single-string}

escape-closing-bracket:
    escaped = "\\" [\]nrt\\];
    unescaped = [^\]];

character-class-item:
    range = escape-closing-bracket  "-" escape-closing-bracket;
    single-char = escape-closing-bracket; {injection}


string-char:
    escaped = "\\" [nrt\\"];
    normal = [^"\\];

number = [0-9]+; {single-string}

string:
    single = "'" string-char* "'"; {no-layout}
    double = "\"" string-char* "\""; {no-layout}

/// A character class represent a selection of terminal characters. This is similar to
/// Regex character classes. Character classes can be inverted by starting them with a `^`.
/// For example, `[^\n]` means it matches any character that is not a newline.
///
/// Character classes can contain a range of characters. Either by listing each individual character, or using
/// a dash (`-`). For example, `[a-z]` means any character in the range a through z (inclusive!),
/// and `[abc]` means an a, b or c
///
/// Note that to use a closing square bracket within a character class, you need to escape it.
///
/// `[^\]]` means any character that isn't a square bracket.
character-class:
    class =  "[" "^"? character-class-item* "]"; {no-layout}


atom: {part-of: expression}
    double-eq = "="; {error: "an `=` can only be used at the start of a constructor"}

    /// Matches a piece of text exactly. Layout is parsed within a literal.
    literal = string;

    /// You can use parentheses to group parts of expressions.
    paren = "(" expression+ ")";

    labelled = identifier ":" atom;

    /// Reference another sort within this expression.
    /// That sort should be parsed in this position in the expression.
    sort = identifier;

    /// A [`character class`](character-class) (range of characters) should be parsed here.
    class = character-class;

/// With expressions, you can give the syntax rules of a single constructor.
/// Expressions can be nested and combined.
expression:
    double-eq = "="; {error: "an `=` can only be used at the start of a constructor"}

    /// Repeat some expression zero or more times
    /// Equivalent to `<expression> {0,}`
    star = atom "*";

    /// Repeat some expression one or more times
    /// Equivalent to `<expression> {1,}`
    plus = atom "+";

    /// Optionally have some expression.
    /// Equivalent to `<expression> {0,1}`
    maybe = atom "?";

    /// Exact repetition. The expression is repeated an exact number of times. Equivalent
    /// to ranged repetition with an equal lower and upper bound.
    repeat-exact = atom "{" number "}";
    /// Ranged repetition. The expression may be repeated any number of times, within the range.
    /// Both bounds are inclusive.
    repeat-range = atom "{" number "," number "}";
    /// Ranged repetition, without upper bound (or an infinite maximum)
    repeat-lower = atom "{" number "," "inf" "}";

    /// Delimited expressions. Says that some expression should be repeatedly parsed,
    /// but between two parses, a delimiter should be parsed too. For example, comma seperated expressions.
    /// The final trailing keyword enables a trailing separator after the sequence. If not present, no trailing
    /// separator is allowed.
    delimited = "delimited" "(" expression "," expression "," delimited-bound ("," "trailing")? ")";

    atom;

/// A delimited expression can be repeated just like normal repetition expressions.
/// To denote this, you can use a delimitation bound.
delimited-bound:
    /// Within a range or possible repetitions.
    num-num = number "," number;
    /// At least some number of repetitions, but no upper bound.
    num-inf = number "," "inf";

    /// Exactly this number of repetitions.
    num = number;

    // Zero or more repetitions.
    star = "*";

    /// One or more repetitions.
    plus = "+";

/// Annotations are tags that modify a specific sort or more often constructor.
annotation-list = "{" delimited(annotation, ",", +, trailing) "}";
annotation:
    /// Mark a constructor as being a mapping from sort x to sort x.
    /// An example is a parenthesis rule:
    /// ```lwb,no_run
    /// expr:
    ///     paren = "(" expr ")"
    /// ```
    ///
    /// In that case you don't want a variant in the expr rule that's called "paren".
    /// Instead, by adding the `injection` annotation you tell the parser that this rule is purely to create a new priority level,
    /// but to use the inner expr as the result of the parse. Thus there will be no rule called "paren".
    injection = "injection";

    /// disable pretty printing. Doesn't work well anyway so don't bother with this annotation
    no-pretty-print = "no-pretty-print";

    /// mark a rule to appear as just a string in the AST. Whatever structure is found within, throw it away and just store
    /// whatever was parsed.
    ///
    /// Note that any AST node has the .as_str() method to request this string representation of the node. For
    /// single-string rules this is simply the default.
    single-string = "single-string";

    /// don't accept any layout characters while parsing this rule
    no-layout = "no-layout";

    /// Annotation for sorts. This sort will not appear in any of the constructors it's used in.
    /// useful for for example the [`newline`] rule in this file.
    hidden = "hidden";

    /// if this rule manages to parse, display an error with the associated message
    /// This annotation can be placed on constructors (these constructors then won't actually exist in the AST,
    /// if the constructor is chosen an error is emitted), or on sorts. On a sort the annotation
    /// has a slightly different effect. If none of the variants in the sort managed to parse
    /// then alongside an "expected ...", that message will be displayed as well.
    /// If this sort was the only possibility at a certain point, only the message will be displayed.
    error = "error" ":" string;

    /// Makes constructors of this rule generate as part of another rule.
    /// This has one major requirement. If a is part-of b then
    /// b must have a rule like `a=a` to allow any a to appear in b
    ///
    /// Injections on rule a become injections into rule b too.
    part-of = "part-of" ":" identifier;

/// A [`sort`] consists of constructors. A sort will try each of the constructors
/// from top to bottom, and use the first one that successfully parses the input string.
///
/// A constructor consists of a name, followed by an [`expression`]
///
/// Constructors can have doc-comments using triple slashes.
constructor: {error: "make sure each constructor ends with a `;` and is indented with 4 spaces."}
    constructor-documented = doc-comment+ constructor;
    constructor = "    " identifier "=" expression+ ";" annotation-list? newline;
    /// using `test;` as a constructor desugars to `test = test;`
    constructor-bare = "    " identifier ";" annotation-list? newline;

newline: {hidden}
    unix = "\n";
    windows = "\r\n";

/// A sort is a group of constructors. See [`constructor`] for more details.
///
/// There is one special sort, called `layout`. It can be used to denote
/// that a grammar should for example ignore certain whitespace or comments.
/// Between every part of an expression, the parser will attempt to parse the
/// layout sort 0 or more times, and throw away whatever it parses.
///
/// Sorts can have doc-comments using triple slashes.
sort:
    sort-documented = doc-comment+ sort;
    sort = identifier ":" annotation-list? newline constructor*;

    /// When a sort has only one constructor, it has simpler syntax.
    sort-single = identifier "=" expression+ ";" annotation-list? newline;

/// Other top-level constructs that are not sorts
meta:
    /// The starting rule is an indication for the parser
    start = "start" "at" identifier ";";

sort-or-meta:
    meta = meta;
    sort = sort;

program = sort-or-meta*;

/// A documentation comment (doc comment) is always associated with a sort
/// or constructor. It documents what it does. Doc comments will be interpreted
/// and will be put on the generated types during codegen.
doc-comment = "///" [^\n]*; {no-layout, single-string}

layout:
    simple = [\n\r\t ];
    comment = "//" [^\n]*;

start at program;